final practice:

=  >  <    -  output is true/false
        	 (> 6 3) = true
 
+ - * / 	-  output is numerical answer
	(* 2 3) = 6
 
range – returns list of numbers from 0 to #-1
(range 5) = (0 1 2 3 4), (range 2 5) = (2 3 4)
 
count – returns the number of characters in the string
(count “emma”) = 4
 
first – returns the first entry in a list
        	(first ‘(1 2 3 4 5) = 1
 
last – returns the last entry in a list
        	(last ‘(1 2 3 4 5) = 5
 
rest – returns all but the first entry in a list
        	(rest ‘(1 2 3 4 5) = (2 3 4 5)
 
drop – drops the first # of entries, returns the rest of the list
             (drop 2 ‘(1 2 3 4 5)) = (3 4 5)
 
take – returns the first # of entries of the list
        	(take 3  ‘(1 2 3 4 5)) = (1 2 3)
 
inc – increases the entry by 1
        	(inc 4) = 5
 
dec – decreases the entry by 1
        	(dec 4) = 3
 
str – creates a single string from the entries
        	(str “computer” “science”) = “computerscience”
 
subs – returns the specified part of a string
        	(subs “computer” 2 6) = “mput”
 
conj – adds an entry to a list
        	(conj ‘(1 2 3 4 5) 9) = (9 1 2 3 4 5)
(conj '(3 4) 2 1) → (1 2 3 4)
 
def – defines a list
(def notes (list :C4 :D4 :E4 :F4))
 
defn – defines an original function
(defn factor
"Returns true if n divides evenly into m"
[m n]
(= (mod m n) 0))
 
mod – returns the remainder of a/b
        	(mod 10 3) = 1
 
Functions with a more complicated structure: 
for – loop
(for [i (range 10)] (* i 2)) = (0 2 4 6 8 10 12 14 16 18)
 
if – conditional if statements
(if (> 2 3) "2 is greater than 1" "2 is less than 1") = “2 is less than 1”
 
map – applies a function to each entry in a list
(map list '(1 3 6 7) '(9 6 3 2)) = ((1 9) (3 6) (6 3) (7 2))
(map + '(5 6 7) '(1 2 3 4) '(9 9 9 9 9 9 9)) = (15 17 19)

apply – applies a function to a list, treats each entry as an argument
        	(apply + ‘(1 2 3 4 5)) = 15





