;; practice for final

;; (mod 5 2) should be 1--yes 

;; for-- syntax if (for [varible_name '(list)....](function)) the varible_name takes the value of each entry in the list and the function is what will happen 

;;range-- makes a list that starts with the first number(defaults to 0 if no beggining) to n-1 of the second number
;; (range 1 11) -- (1 2 3 4 5 6 7 8 9 10)
;; (range 2 7) -- (2 3 4 5 6)

;; if-- used for conditional statements that must be t/f with the syntax (if (conditional) "printed if true" "printed if false")
;; (if (2>1) "2 is greater than 1" "2 is not greater than 1")

;;count-- conts the number of items in a collection or string 
   (count "caitlin")
=> 7
   (count '("cait" "mc"))
=> 2
   (count [1 2 3 4 4 ])
=> 5
   
;; first -- returns the 1st item in a sequence    
   (first [2 3 4])
=> 2
   (first "cait")
=> \c
   (first [[1 3 4] [2 3]])
=> [1 3 4]
   (first '("cait" "mc"))
=> "cait"

;;last -- returns the last item in a collection 
 (last '("cait" "M" "c"))
=> "c"
   (last [[1 2] [3 4 5] [43]])
=> [43]
   (last "cait")
=> \t

;; drop -- returns a sequence of all but the first n items in a collection ** 0 doesnt do anything
(drop 2 [1 2 3 4 5])
=> (3 4 5)
   (drop 6 [ 1 2 3 4 5])
=> ()
   (drop 0 [1 2])
=> (1 2)
       
;; take-- returns a sequence of the first n items in a collection 

   (take 3 '( 1 2 3 4 5))
=> (1 2 3)
   (take 2 [ 1 2 3 4 5])
=> (1 2)
   (take 3 '(1 2))
=> (1 2)
   (take 2 '("cait"))
=> ("cait")
   (take 2 "cait")
=> (\c \a)

;; dec -- returns a number 1 less than the input 
   (dec 4)
=> 3
   (dec 23)
=> 22

;; subs returns the substring of the string beggining at the start number ** remember counting starts at 0 and ending at n-1 end number(defaults to length of string)
   (subs "caitlin" 2 5)
=> "itl"
   (subs "caitlin" 3)
=> "tlin"

;; apply-- applies the function to the entires of the list 
   (apply + ' (1 2))
=> 3
   (apply str [ 1 2 3])
=> "123"

;; conj -- returns a new collection with "n" added to the orginal ** "n" is added to the END of a vector, but the beggining of a list
   (conj [1 2 3 ] 4)
=> [1 2 3 4]
   (conj '(1 2 3) 4)
=> (4 1 2 3)
   (conj ["cait" "mc"] "q")
=> ["cait" "mc" "q"]
   (conj '("cait" "mc") "q")
=> ("q" "cait" "mc")
   (conj '(1 2) 3 5)
=> (5 3 1 2)
   (conj [ 1 2] 3 4 )
=> [1 2 3 4]

;; inc -- outputs a number 1 greater than the input 
   (inc 4)
=> 5
   (inc 34)
=> 35
   ( inc 2/3)
=> 5/3

;; map-- a function is applied to the 1st entry of each list, then the second and so on until the list is used up 
;; (map function list1 list)

   (map + [ 1 2 3] [ 3 4 5])
=> (4 6 8)
   (map + [ 1 2] [ 3 4 5])
=> (4 6)

;; str-- with more than 1 argument, it returns a combination of the arguments into 1 

   (str "C" "a" "i" "t")
=> "Cait"
   (str [ 1 2 3])
=> "[1 2 3]
   (str '( 1 2 3))
=> "(1 2 3)"
   (str '("cait" "m" "c" "q"))
=> "(\"cait\" \"m\" \"c\" \"q\")"

;; def - assigns data to that varible name 
;; (def my-value 5)  everytime you input my-value 5 will be used 
