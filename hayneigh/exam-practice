;; Math operations:
;; Write the operation in the beginning
;; If you want to do (10 - 9) + 3 it would be:
(+ (- 10 9) 3)

;; Mod:
(mod (mod 30 11) 3) ;;remainder is 2: first divides 30 and 11 and then divides that by 3 

(take 4 (drop 3 '(1 2 3 4 5 6 7 8 9) ;; it will first drop 3 numbers and then take the four after: "4 5 6 7"
(take 5 (range 10)) ;; (0 1 2 3 4)

(defn lc_n 
  "Returns true if n divides evenly into m"
  [m n]
  (= (mod m n) 0)) 
  
  (= '(1 2 3 4) (conj '(2 3 4) 1) ;;output is true 
  
  (= (.toUpperCase (str "hello " "world")) (.toUpperCase "hello" "world")) ;;output is true 
