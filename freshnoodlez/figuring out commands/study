Range
Creates a range of numbers: 
(range 100)--> 1 2 3 4… 
(range (last (range 10))) → drops the last number from the range and creates a range out of the 9 numbers left 
(range (inc 10))--> includes the last number in range, so its 0 1 2 3 4 5 6 7 9 10 in stead of 0 1 2 3 4 5 6 7 8 9
(defn s
  [n]
    (apply + (map inc (range n))))
Looks at the range of numbers and includes all the integers, and then adds them up 
 
Count 
Count the number of units in a string or integer, so can count letters in words, lists, or numbers 
(defn longer_than
  "returns true if the length of the first list is longer than n"
  [lst n]
 (> (count lst) n))
So first it counts the numbers in the list and then compares it to n to decide what is bigger 
First
Can choose first number in a list 
(first ‘(1 2 3 4))

Last
Chooses last number in a list or a range 
Rest
Rest leaves out the first number in a list or a range 
Drop
Command it to drop a certain amount of integers from a list 
Take
Pulls the commanded amount of numbers from a list 
(take 4 '(1 2 3 4 5 6 7)) 
Inc
Inc includes all the integers when looking at a range 
(map inc (range 10) → 1 2 3 4 5 6 7 8 9 10 … increases increment of range
Dec
(map dec ‘(1 3 5)--> 0 2 3 
Dec finds the numbers one less than the ones called in the list
Str
In clojure strings are text between quotes 
( str “hello world”) 
Subs
Drops the indexed number of variables in a string
(subs “clojure” 1 3)
Returns “lo”
Conj
Re-organizes order of list, by taking things outside of the list and putting them in the front 
(conj '(1 2 3 4) 9)--> (9 1 2 3 4)
(def primes ‘(2 3 5 7 11 13) 
(conj (range 5) (last primes))

Def
Defines a function you can call it, and they stay the same each time
Defn
Defns are functions that are evaluated every time they are called
syntax→ (defn <function-name> [argument(s)] body)
Body is the code you want to run on the arguments 
Ex. 
(defn doubler 
[n]
(* n 2))
Also when writing long functions with indentation, and we can add an in-function comment called ‘docstring’ 
	
Mod
Returns the remainder of dividing b into a 
(mod 12 2) → 0
Functions with a more complicated structure: 
For 
If
Used in defn 
Ex. (defn longer_list
“Reported if lst1 has more entries than lst2.”
[lst1 lst2]
(if  (> (count lst1) (count lst2))
“List 1 is longer!”
“List 1 is not longer”
)
)

Map
Mapping is a data structure which associates keys with values-- maps are indexes for looking things up and for representing different pieces of named information together
What are you maping should be in ( )
(map list '(:C4 :D4 :E4) '(1 2 3))
→ (:c3 1) (:d4 2) (:e4 3)
