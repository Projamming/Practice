;; ;; practicing all functions 
;; (range 10)
;; (map inc (range 10))
;; (map dec (range 10))
;; (range (inc 10))

;; count
;; (defn count_let
;;   "returns true if the length of the first word is longer than the seond"
;;   [lst1 lst2]
;;   (> (count lst1)(count lst2)))

;; (first '(4 5 6))
;; (last (range 12))
;; (first (map inc (range 10))) 
;; (rest (range 10))
;; (rest (map inc (range 10)))
;; (drop 3 '(4 5 6 7 8))
;; (take 4 '(1 2 3 4 5 6 7 8))

;; (subs "1 2 3 4" 1)

;; (def evens '(2 4 6 8 10 12))

;; (conj (range 6) (last evens))

;; (defn summer 
;;   "returns the sum of the first n integers"
;;   [n]
;;   (apply + (map inc(range n))))

;; (for [a '(1 2 3)] (nth evens a))

