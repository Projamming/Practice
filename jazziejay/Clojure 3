;; Warmup:
;; What will this output?

(def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; (13 0 1 2 3 4)
;; Answer: Correct!

;; Toady: for loops, if statements

;; Loops syntax:
;; (for [v l] o)
;; Variable (v) takes on value of each entry in
;; the list/set of data (l). There can be
;; multiple variable names, lists in these 
;; brackets. What to output (o) is the section 
;; after the bracket! You use variable names 
;; here.

;; (for [i (range 10)] (* i 2))
;; (for [i (range 10)] (* i 2))

;; First number of first variable listed (cat) 
;; will be added (i this case) to each number 
;; of the second list (dog).

(for [cat primes dog '(2 3 4)] (+ cat dog))

;; ... and vice versa.

(for [dog '(2 3 4) cat primes ] (+ cat dog))

(def daves_list '("a" "b" "c" "d" "e" "f" "g"))
(for [k '(1 3 5)] (nth daves_list k))

(for [x '(1 2 3) y '(4 5)] (list x y))

(for
  [x '(1 2 3)
  y '(4 5)]
  (list x y)
)

(for
  [x '(:C4 :D4 E4)
  y '(1 0.5 0.5)]
  (list x y)
)

;; Conditionals (if statements)
;; Conditionals syntax:
;; (if c t f)
;; Condition (c) must be true or false. "t" and 
;; "f" represente what to output if true (t) or 
;; false (f). The "f" portion of the syntax is
;; similar to the "else" command in Ruby.

(if (> 2 1) "2 is greater than 1" "2 is less than 1")

(defn longer_list
  "Return true if lst1 has more entries than lst2."
  [lst1 lst2]
  (if (> (count lst1) (count lst2))
    "List 1 is longer!"
    "List 1 is not longer."
  )
)

;; Map syntax:
;; (map f l)
;; "f" stands for function, which could be math, 
;; a built-in function (like first, list, count, 
;; dec [decrement], etc.), our own function we 
;; wrote earlier. "l" stands for one or more 
;; lists! Function is applied to the first entry 
;; of the list (--> output) and then the second 
;; (--> output) etc. until the list is exhausted.

(map dec '(1 3 6 7))

(map list '(1 3 6 7) '(9 6 3 2))
(map + '(5 6 7) '(1 2 3))
(map + '(5 6 7) '(1 2 3 4) '(9 9 9 9 9))

;; Following code very similar to 
;; play_pattern_timed.
(map list '(:C4 :D4 :E4) '(1 2 3))
