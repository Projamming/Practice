;; Warmup 1:
;; What list will be outputted by the
;; following statement?

(def lst1 '(2 3 4))
(def lst2 '(4 3 2))
(map / lst1 lst2)

;; ~Apply~

;; Apply Syntax:
;; (apply f l)
;; Function (f) is "put between" each
;; element of the list.
;; Ex: 
(apply + '(1 2 3))

;; It works as if we had written the
;; function and the entries of the list.
;; Explanation ^ It would've worked the 
;; same as this:
(+ 1 2 3)

;; What if I wanted to sum all of the 
;; entreis in the list generated by the
;; warmup?
(apply + (map / lst1 lst2))

;; Warmup 2:
;; Write a function called "fact"
;; (factorial) tha accepts a number n
;; and returns n!

(defn fact
  "Returns n!"
  [n]
  (apply * (map inc(range n)))
)

;; or

(defn factt
  "Returns n!"
  [n]
  (apply * (rest (range (inc n))))
)

;; or

(defn facttt
  "Returns n!"
  [n]
  (apply * (conj (rest (range n)) n)))

;; Warmup 3:
;; What is the output of (s 6)?

(defn s
  [n]
  (apply + (map inc (range n)))
)
