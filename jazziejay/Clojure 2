;; More things we can do with lists:
(conj '(1 2 3 4) 9)

;; A symbol is a string preceded by a colon:
(list :C4 :D4 :E4 :F4)
(def notes (list :C4 :D4 :E4 :F4))

;; We will eventually do stuff like this:
;; (play-chord (chord (:C4 :major)))

;; The big deal in Clojure is defining our own 
;; fucntions:

;; Syntax: (defn <function-name>) [argument(s)] body)
;; Where "body" is is the code we want to run on the
;; arguments.

;; "defn" is a contraction
(defn doubler [n] (* n 2))

;; Clojure data is "immutable" (We cannot change it
;; permanently once it is assigned to a variable).

(defn tripler [n] (* n 3))

(defn hexer [n] (tripler (doubler n)))

(defn greet [name] (str "Hello " name))
(defn greeter [name city] (str "Hello " name " from " city))
(def me "Matty")

;; Q1. What is this function's job?
(defn lc [lst1 lst2] (> (count lst1) (count lst2)))

;; We usually write long functions with indentation,
;; and we can add an in-function comment called a
;; 'docstring':
(defn lc1
  "Returns true if the length of lst1 exceeds that of lst2"
  [lst1 lst2]
  (> (count lst1) (count lst2)))

  ;; Q2. Write a function that takes two arguments
  ;; [m n] and returns true if n divides evently
  ;; into m. Hint: (mod )

(defn q2
  "Returns true if n divides evenly into m"
  [m n]
  (= (mod m n) 0))

;; Q3. Write a function that takes two lists
;; [lst1 lst2] and returns true if the last
;; element of lst1 equals the first element of
;; lst2

(defn q3
  "Returns true if the last element of lst1 equals the first element of lst2"
  [lst1 lst2]
  (= (last lst1) (first lst2))
  )

;; More questions!
;; Q1. Write the function 'addy' that takes
;; three arguments [i j k] and returns 'true'
;; if i = j + k.

(defn addy
  "Returns true if i = j + k."
  [i j k]
  (= (+ j k) i)
  )
;; Answer: Correct!

;; Q2. Write the function 'longer_than' that 
;; takes two arguments [lst n] and returns
;; 'true' if the length of lst is longer than n.

(defn longer_than
  "Returns true if the length of the lst is longer than n."
  [lst n]
  (> (count lst) n)
  )
;; Answer: Correct!
