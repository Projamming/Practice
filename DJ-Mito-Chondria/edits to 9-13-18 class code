# Written in class on Thursday, September 13.
# We took the code for the Marinera rhythm (see below), which was
# written in sample/sleep format, and compressed it into a couple
# of rings. To simplify the rings, we also defined two variables:

tom =  :drum_tom_hi_hard
bass = :drum_bass_hard

define :rhythm do
  
  7.times do
    
    # We discussed having one clock for the drums, rather than three, but
    # we haven't cleaned this up yet. See line 21..
    tick :drums_clock
    
    drums = (ring tom, bass, tom, bass, tom, bass, tom)
    drums_sleep = (ring 0.5, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5)
    drums_amps = (ring 2, 1, 1, 1, 2, 1, 1)
    
    # Can we change all of these ticks to looks?
    # I believe we can! If we keep .tick for the same clock, then it will
    # tick 2 times before playing the 2nd sample in the ring (bass), and then
    # will always tick 2 more times before playing a sample in the ring.
    # If we use .look instead of .tick, then this eliminates the problem.
    # However, you can get around changing the ticks to .looks if you
    # give each .tick a name like ,tick(:drums_clock) and .tick(:amps_clock).
    sample drums.tick(:drums_clock), amp: drums_amps.tick(:drums_clock)
    sleep drums_sleep.tick(:drums_clock)
  end
  
end

loop do
  
  bpm_ring = (ring 60, 80, 100, 120)
  use_bpm bpm_ring.tick(:bpm_clock)
  
  # If you add the ring.tick name to the end of .look (:bpm_clock), you can get the
  # respective bpms to print out!
  print bpm_ring.look(:bpm_clock)
  
  rhythm
  
end


##| 7.times do
##|   use_bpm 60
##|   rhythm
##| end


##| 7.times do
##|   use_bpm 80
##|   rhythm
##| end


##| 7.times do
##|   use_bpm 100
##|   rhythm
##| end


##| 21.times do
##|   use_bpm 120
##|   rhythm
##| end

##| sleep 1
