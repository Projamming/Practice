;; Warmup #1
(def lst1 '(2 3 4))
(def lst2 '(4 3 2))
;; get (1/2 1 2)

;; (map / lst1 lst2)

;; (float (map / lst1 lst2))

;; Float only works on ratios or numbers

;;I want to apply each float thing to everything inthe list
;; (apply (map / lst1 lst2)))

;; apply: The syntax:
;; (apply <function> '(list))

(apply + '(1 2 3))
;; Like saying (1 + 2 + 3)
;; works as if we had written (+ 1 2 3)

;; What if I wanted to sum all of the entries in the list generated by the warmup?
(apply + (map / lst1 lst2))


;; warmup #2: Write a function called 'fact' (short for factorial) that accepts a number n and 
;; returns n!

(defn fact
"Returns n!"
[n]
(apply * (map inc (range n)))
;; (apply * (rest (range (inc n))))  ;; alternative way
)

;; rest gives us all but the first in a list

;; Warmup #3: What is th output of (s 6)
(defn s
"Returns n!"
[n]
(apply + (map inc (range n)))
)

