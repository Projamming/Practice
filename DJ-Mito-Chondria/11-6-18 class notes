In Clojure:
;; Loops and conditional if statements
(def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; today: for loops, if statements
;; for loops: syntax is
;; (for [i <variable name> list] what to output <use variable
;; names>) where the variable will take
;; on the value of each entry in the list. 
;; You can have more pairs in the same bracket if you want.
;; (for [i (range 10)] (* i 2))
;; (for [i (range 10)] (* 1 2)) ;; outputs 10 2s

(for [cat primes dog '(2 3 4)] (+ cat dog))  
;; starts with first number in primes and adds to dog list.
;; Then goes to the next number in primes.

(for [dog '(2 3 4) cat primes] (+ cat dog))  
;; 2 in dog list will stay fixed and go through the primes list.


(def daves_list '("a" "b" "c" "d" "e" "f" "g"))
(for [k '(1 3 5)] (nth daves_list k))

;; Making pairs from numbers in lists
;; (for [x '(1 2 3) y '(4 5)] (list x y))
;; ;; Snazzy way to write this code:
;; (for 
;;   [x '(:C4 :D4 :E4) 
;;    y '(1 0.5 0.5)] 
;;   (list x y)
;; )

;; Conditionals (if statements)
;; Syntax for Conditionals:
;; (if <condition(must be T/F)> <output if true> <output if false> )

;; (if (> 2 3) "2 is greater than 1" "2 is less than 1")

(defn longer_list
  "Reported if lst1 has more entries than lst2."
  [lst1 lst2]
  (if (> (count lst1) (count lst2))
    "List 1 is longer!"
    "List 1 is not longer."
  )
)


;; Map: built in function: similar to play pattern timed
;; Syntax: 
;; (map <function> <one or more lists>))
;; The function is applied to the first entry of each/the list (output)
;; and then the second (output), etc until the list is exhausted.

;; dec is a built in function: decrement (subtracts 1)
(map dec '(1 3 6 7))  ;; (0 2 5 6)


(map list '(1 3 6 7) '(9 6 3 2))
;; This is v useful!!
(map list '(:C4 :D4 :E4) '(1 2 3))

(map + '(5 6 7) '(1 2 3 4) ' (9 9 9 9 9 9)) ;; (15 17 19)
;; map our own function to the data
------------------------------------------------------------------
In Ruby:
# In Clojure: (for [i (range 10)] (* i 2))
# In Ruby:
# for i in (0..9)  # Two dots will include the last number
#   puts i * 2
# end

# In Clojure: (def daves_list '("a" "b" "c" "d" "e" "f" "g"))
# (for [k '(1 3 5)] (nth daves_list k))
# In Ruby:
# daves_list = ["a", "b", "c", "d", "e", "f", "g"]

# for k in [1, 3, 5]
#   print daves_list[k]
# end

# Clojure:
# (defn longer_list
#   "Reported if lst1 has more entries than lst2."
#   [lst1 lst2]
#   (if (> (count lst1) (count lst2))
#     "List 1 is longer!"
#     "List 1 is not longer."
#   )
# )

# Ruby: (Called a 'method')
def longer_list(lst1, lst2)  # Passed Longer_list arguments
  if lst1.count > lst2.count
    puts "List 1 is longer! "
  else
    puts "List 1 is not longer. "
  end
end
