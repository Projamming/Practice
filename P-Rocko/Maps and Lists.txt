Clojure Maps

(map list '(1 3 6 7) '(9 6 3 2))

(def lst1 '(1 1 4))
(def lst2 '(6 2 2))
(map / lst1 last)
;; (apply float (map / lst1 lst2))

;; apply
(apply + '(1 1 1))
(+ 1 2 3) ;; works just like above the same as above, even when list is unknown


;; warm up #2 -- write function called "fact" (factorial) that accepts a number n and returns n!


###Will help for project question#####
(defn fact
  "Returns n!"
  [n]
  (apply * (rest (range (inc n))))
)

(apply * (rest (range (inc 5))))

;; warm up #3 -- what is the output of (s 6)? 

(defn s 
  [n]
  (apply + (map inc (range n))))