;; Warmup Tuesday, November 6
(def primes '(2 3 5 7 11 13))

(conj (range 5) (last primes))


;; Today: for loops, if statements
;; for loops:
;;syntax is (for [variable_name list ... ____] output-use variable names here-)
;; Everything in the brackets, the variable will take on value of each entry in the list. More pairs of variable_names and list can be inserted in the brackets
;; range 10
;; (for [i (range 10)] (* i 2))
;; (for [i (range 10)] (* 1 2))

;; (for [cat primes dog '(2 3 4)] (+ cat dog))

;; (for [dog '(2 3 4) cat primes] (+ cat dog))

;; (def daves_list '("a" "b" "c" "d" "e" "f" "g"))
;; (for [k '(1 3 5)] (nth daves_list k))

;; (for [x '(1 2 3) y '(4 5)] (list (x y))

;; (for 
;;   [x '(1 2 3)
;;   y '(4 5)]
;;   (list x y))


;; condition must be true or false
;; Conditionals: syntax is
;; (if -condition- -output_when_true- -output_when_false-)

;; (if (> 2 3) "2 is greater than 1" "2 is less than 1")

;; (defn longer_list
;;   "Reported if lst1 has more entries than lst2."
;;   [lst1 lst2]
;;   (if (> (count lst1) (count lst2))
;;     "List 1 is longer!"
;;     "List 1 is not longer."
;;   )
;; )

;; similar to play pattern timed
;; Map (map -function- -one_or_more_lists-)
;; function is applied to the first entry of the list 
;; (-> output) ad then the secnod (-> output) etc. until 
;; the list is exhausted


;; (map dec '(1 3 6 7))

;; (map list '(1 3 6 7) '(9 6 3 2))
;; (map list '(:C4 :D4 :E4) '(1 2 3))



;; (apply + '(1 2 3))
;; (+ 1 2 3)

;; (def

;; Warmpuo Tuesday November 13

;; (defn xyz
;; "Returns the number of characters in all of the strings in the list lst."
;; [lst] ;; lst is a list of strings, like '("dave" "perkins")
;; (count (apply str lst)))



;; range

;; count

;; first

;; last

;; rest

;; drop

;; take

;; inc


;; str

;; subs

;; conj

;; def

;; defn

;; mod

;; for

;; if

