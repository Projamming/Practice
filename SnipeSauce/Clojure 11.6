;; Warm up
(def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; tday: for loops, if statements 
;; (for [i (range 10)] (* i 2)) ;; for = function
;; (for [i (range 10)] (* 1 2))

;; (for [cat primes dog '(2 3 4)] (+ cat dog))
;; (for [dog '(2 3 4) cat primes] (+ cat dog))

;; (def daves_list '("a" "b" "c" "d" "e" "f" "g"))
;; (for [k '(1 3 5)] (nth daves_list k))

;; (for [x '(1 2 3) y '(4 5)] (list x y))

;; (for 
;;   [x '(:C4 :D4 :E4)
;;   y '(1 0.5 0.5)]
;;   (ist x y)
;; )

;; (if (> 2 3) "2 is great than 1" "2 is less than 1") # careful about what is within the parentheses

;; (defn longer_list
;;   "Reported true if lst1 has more entries than lst2."
;;   [lst1 lst2]
;;   (if (> (count lst1) (count lst2))
;;     "List 1 is longer
;;     "List 1 is not longer"
;;   )
;; )

;; map -- similar to play_pattern_timed
(map dec '(1 3 6 7))
(map list '(1 3 6 7) '(9 6 3 2))
(map list '(:C4 :D4 :E4) '(1 2 3))
(map + '(5 6 7) '(1 2 3))
(map + '(5 6 7) '(1 2 3) '(9 9 9))
(map + '(5 6 7) '(1 2 3) '(9 9 9 9 9 9 9))
