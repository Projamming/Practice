Repl Notes/Practice:

;; (- (/ 18 3) (* 3 2))

;; (- (* (+ 3 1) (/ 2 1)) 6)

;; (mod 14 3)
;; (mod 19 5)
;; (= (mod 14 3) (mod 19 5))

;; (mod 11 4) 
;; (mod 5 5)
;; (> (mod 11 4) (mod 5 5))

;; (mod 5 -2)
;; (mod -2 5)

;; (drop 5 (take 5 (range 20)))

;; (/ 15 5)
;; (/ 5 4)
;; (/ 18 12)

;; (+ 1/2 1/4)

;; (float 1/2)
;; (float (+ 1/2 1/4))
;; (float (+ 12/411 610/99))

;; (mod 10 3)
;; (mod 12 2)
;; (mod (mod 30 11) 3)

;; Grab the sub-list (5 6 7) from master list '(1 2 3 4 5 6 7 8 9)
;; (take 3 (drop 4 '(1 2 3 4 5 6 7 8 9)))
;; (drop 4 (take 7 '(1 2 3 4 5 6 7 8 9)))

;; (range 10, 20)

;; (def foo '(1 2 3 4 5 6))
;; (first foo)
;; (def apples (range 100))
;; apples

;; (range (last (range 10)))

;; (conj '(1 2 3 4) 9)

;; (defn divide_by
;;   "returns true if n divides evenly into m."
;;   [m n]
;;   (= (mod m n) 0))

;; Enter this into the repl to test: (= (mod 8 4) 0)

;; (defn lc
;;   "Takes two lists [lst1 lst2] and returns true if the last element of lst1 equals the first element of lst2."
;;   [lst1 lst2]
;;   (= (first lst2) (last lst1)))

;; (def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; (for [i (range 10)] (* 1 2))

;; (for [cat primes dog '(2 3 4)] (+ cat dog))

;; (def rand_list '("a" "b" "c" "d" "e" "f" "g"))
;; (for [k '(1 3 5)] (nth rand_list k)) 

;; (for [x '(1 3 5) y '(4 5)] (list x y))

;; conditionals
;; (if (> 2 3) "2 is greater than 1" "2 is less than 1")

;; (defn longer_list
;;   "Reported if lst1 has more entries than lst2."
;;   [lst1 lst2]
;;   (if (> (count lst1) (count lst2))
;;   "List 1 is longer"
;;   "List 2 is longer"))

;; ;; map
;; (map dec '(4 10 25))
;; (map + '(5 6 7) '(1 2 3 4) '(9 9 9 9 9 9 9))

;; (def lst1 '(2 3 4))
;; (def lst2 '(4 3 2))
;; (map / lst1 lst2)

;; (def numbers (range 5))
;; (+ 0 1 2 3 4)
;; (+ range) ;; will not work 

;; (apply + '(0 1 2 3 4))
;; (apply + (range 5))
;; (apply + numbers)

;; (def my_list (map / lst1 lst2))
;; (apply + my_list)

;; (defn factorial
;;   "returns n!"
;;   [n]
;;   (apply * (map inc (range n)))
;; )

;; (drop 1 (range (inc 4)))

(map inc (range 5))

