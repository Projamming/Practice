(map list '(1 3 6 7) '(9 6 3 2))

(def lst1 '(2 3 4))
(def lst2 '(4 3 2))
(map / lst1 lst2)
;; (apply float (map / lst1 lst2))

;; apply
(apply + '(1 2 3))
(+ 1 2 3) ;; works the same as above, but useful because we don't always know what is in the list

;; what is we wated to sum all of the entries in the list generated by the warmup?
(apply + (map / lst1 lst2))

;; warm up #2 -- write function called "fact" (factorial) that accepts a number n and returns n!

(defn fact
  "Returns n!"
  [n]
  (apply * (rest (range (inc n))))
)

(apply * (rest (range (inc 5))))

;; warm up #3 -- what is the output of (s 6)? 

(defn s 
  [n]
  (apply + (map inc (range n))))









