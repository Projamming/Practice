;; (range 10)
;; (range (last (range 20)))
;; (range (inc 100))
;; (range (dec 10))

;; (defn s
;;   [n]
;;   (apply + (map inc (range n)))
;;   )

;; (/ 5 10)
;; (* 5 10)
;; (- 5 10)
;; (+ 5 10)

;; (defn longer_than
;;   "returns true if the length of the first list is longer than n"
;;   [lst n]
;;  (> (count lst) n))

;; (first (list 1 2 3 4 5))
;; (first '(1 2 3 4 5))
;; (last (list 5 6 7 8 9))
;; (last '(6 7 8 9))

;; (rest (range 10))

;; (drop 2(range 10))
;; (drop 5 '(1 2 3 4 5 6 7 8 9 10))

;; (take 4 '(1 2 3 4 5 6 7))
;; (take 3 (range 10))

;; (map inc (range 5)) 
;; (map inc '(1 2 3 4 5))

;; (str "Hi my name is Kara")

;; (subs "Lacrosse" 2 5)

;; (def primes ‘(2 3 5 7 11 13) 
;; (conj (range 5) (last primes))

;; (def primes '(2 3 5 7 11 13))
;; (conj (range 5) (last primes))

;; (conj (range 5) 9)

;; (defn kara
;; "Returns the number you enter times 3"
;;   [n]
;;   (* n 3))

;; (defn doubler 
;; [n]
;; (* n 2))

;; (mod 12 10)
;; (mod 20 5)
;; (mod 20 16)

;; (def primes '(2 3 5 7 11 13))
;; (for [cat primes dog '(2 3 4)] (+ cat dog))

;; (defn longer_list
;; “Reported if lst1 has more entries than lst2.”
;; [lst1 lst2]
;; (if  (> (count lst1) (count lst2))
;; “List 1 is longer!”
;; “List 1 is not longer”
;; )
;; )


;; (map list '(:C4 :D4 :E4) '(1 2 3))
;; (map list '(1 2 3 4 5) '(2 3 4 5 6))

;; (apply + (list 0 1 2 3 4))
;; (apply + (range 5))

